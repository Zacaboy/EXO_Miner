//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""bfb5dad4-a3b9-4ba1-bc69-e2641e040920"",
            ""actions"": [
                {
                    ""name"": ""OnMove"",
                    ""type"": ""Value"",
                    ""id"": ""bae6f6ff-ac88-470e-88a1-105f5ffe9f26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnShoot"",
                    ""type"": ""Button"",
                    ""id"": ""d8a67e6f-fd7f-493d-8817-022f4a0370d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c137d8ed-369b-4827-a313-7417b170c1be"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""45337eba-d3b7-44b8-a9e5-910cf4955dfc"",
                    ""path"": ""<HID::Logitech Extreme 3D pro>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""76a5e926-e04c-435f-aa0e-8d0b307b67e7"",
                    ""path"": ""<HID::Logitech Extreme 3D pro>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c20a035f-6b93-42a8-89ac-28fae2959c58"",
                    ""path"": ""<HID::Logitech Extreme 3D pro>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d020a9db-07dd-4e40-97e8-366d5bfbdcbe"",
                    ""path"": ""<HID::Logitech Extreme 3D pro>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""089c17bf-d4d5-47fc-b651-e2b7ab17a79f"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": ""Tap(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Look"",
            ""id"": ""c23613ab-dd47-426c-9d38-9d03c149a1e6"",
            ""actions"": [
                {
                    ""name"": ""OnLook"",
                    ""type"": ""Value"",
                    ""id"": ""ab451174-b2d7-4f11-8426-5891dfa36acc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd00564c-e09a-4124-9021-8286668ee8ac"",
                    ""path"": ""<HID::Logitech Logitech Extreme 3D>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_OnMove = m_Player.FindAction("OnMove", throwIfNotFound: true);
        m_Player_OnShoot = m_Player.FindAction("OnShoot", throwIfNotFound: true);
        // Look
        m_Look = asset.FindActionMap("Look", throwIfNotFound: true);
        m_Look_OnLook = m_Look.FindAction("OnLook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_OnMove;
    private readonly InputAction m_Player_OnShoot;
    public struct PlayerActions
    {
        private @PlayerController m_Wrapper;
        public PlayerActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMove => m_Wrapper.m_Player_OnMove;
        public InputAction @OnShoot => m_Wrapper.m_Player_OnShoot;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @OnMove.started += instance.OnOnMove;
            @OnMove.performed += instance.OnOnMove;
            @OnMove.canceled += instance.OnOnMove;
            @OnShoot.started += instance.OnOnShoot;
            @OnShoot.performed += instance.OnOnShoot;
            @OnShoot.canceled += instance.OnOnShoot;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @OnMove.started -= instance.OnOnMove;
            @OnMove.performed -= instance.OnOnMove;
            @OnMove.canceled -= instance.OnOnMove;
            @OnShoot.started -= instance.OnOnShoot;
            @OnShoot.performed -= instance.OnOnShoot;
            @OnShoot.canceled -= instance.OnOnShoot;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Look
    private readonly InputActionMap m_Look;
    private List<ILookActions> m_LookActionsCallbackInterfaces = new List<ILookActions>();
    private readonly InputAction m_Look_OnLook;
    public struct LookActions
    {
        private @PlayerController m_Wrapper;
        public LookActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnLook => m_Wrapper.m_Look_OnLook;
        public InputActionMap Get() { return m_Wrapper.m_Look; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LookActions set) { return set.Get(); }
        public void AddCallbacks(ILookActions instance)
        {
            if (instance == null || m_Wrapper.m_LookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LookActionsCallbackInterfaces.Add(instance);
            @OnLook.started += instance.OnOnLook;
            @OnLook.performed += instance.OnOnLook;
            @OnLook.canceled += instance.OnOnLook;
        }

        private void UnregisterCallbacks(ILookActions instance)
        {
            @OnLook.started -= instance.OnOnLook;
            @OnLook.performed -= instance.OnOnLook;
            @OnLook.canceled -= instance.OnOnLook;
        }

        public void RemoveCallbacks(ILookActions instance)
        {
            if (m_Wrapper.m_LookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILookActions instance)
        {
            foreach (var item in m_Wrapper.m_LookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LookActions @Look => new LookActions(this);
    public interface IPlayerActions
    {
        void OnOnMove(InputAction.CallbackContext context);
        void OnOnShoot(InputAction.CallbackContext context);
    }
    public interface ILookActions
    {
        void OnOnLook(InputAction.CallbackContext context);
    }
}
